// Generated by CoffeeScript 1.7.1
(function() {
  var Model, code, u,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof window === 'undefined') {
    code = require("../lib/agentscript.coffee");
    eval('var ABM = this.ABM = code.ABM');
  }

  u = ABM.util;

  ABM.test = {};

  ABM.test.Model = Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.setup = function() {
      this.preSetup();
      this.setupBreeds();
      this.setupPatches();
      this.setupAgents();
      this.setupCitizens();
      return this.setupLinks();
    };

    Model.prototype.preSetup = function() {};

    Model.prototype.setupBreeds = function() {
      return this.agentBreeds(["citizens"]);
    };

    Model.prototype.setupPatches = function() {
      return this.patches.create();
    };

    Model.prototype.setupAgents = function() {
      var agent, i, _i, _len, _ref, _results;
      i = -20;
      _ref = this.agents.create(41);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        agent = _ref[_i];
        agent.moveTo({
          x: i,
          y: i
        });
        _results.push(i += 1);
      }
      return _results;
    };

    Model.prototype.setupCitizens = function() {
      var citizen, i, j, _i, _len, _ref, _results;
      i = 10;
      j = 10;
      _ref = this.citizens.create(10);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        citizen = _ref[_i];
        citizen.moveTo({
          x: i,
          y: j
        });
        i += 1;
        if (i > 14) {
          i = 10;
          _results.push(j += 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Model.prototype.setupLinks = function() {
      var i, j, _i, _len, _ref, _ref1, _results;
      _ref = [[0, 1], [2, 1], [1, 2], [1, 3], [4, 10]];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], i = _ref1[0], j = _ref1[1];
        _results.push(this.links.create(this.agents[i], this.agents[j]));
      }
      return _results;
    };

    return Model;

  })(ABM.Model);

  ABM.test.setupModel = function(options) {
    var model;
    if (options == null) {
      options = {};
    }
    if (options.torus == null) {
      options.torus = false;
    }
    if (options.model == null) {
      options.model = Model;
    }
    model = new options.model({
      patchSize: 20,
      mapSize: 40,
      isTorus: options.torus,
      hasNeighbors: true
    });
    return model;
  };

}).call(this);

//# sourceMappingURL=shared.spec.map
